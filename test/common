#!/bin/bash

export obj="a/main.o b/c/c.o b/d/d.o b/main.o c/c.o d/libshared.o e/main.o f/main.o main.o"
export test_obj="e/test.o"
export dep="a/main.d b/c/c.d b/d/d.d b/main.d c/c.d d/libshared.d e/main.d f/main.d main.d"
export test_dep="e/test.d"
export notes="main.gcno a/main.gcno b/main.gcno b/c/c.gcno b/d/d.gcno c/c.gcno d/lib.gcno e/main.gcno"
export test_notes="e/test.gcno"
export sha1=".compile.cc.sha1 .compile.cxx.sha1 .link.cc.sha1 .link.cxx.sha1"
export targets="a/program_a a/test_dupl b/program_b c/test_cc d/libshared.so e/program_e program"
export programs="program_a test_cc test_dupl program_b program_e program"
export libraries="libshared.so"
export data="data.dat"
export libdata="libdata.dat"
export manuals="man.1"
export tests="e/test.o e/test_program"
export all_no_tests="${obj} ${dep} ${sha1} ${targets}"
export all="${all_no_tests} ${test_obj} ${test_dep} ${tests}"
export all_coverage="${all} ${notes} ${test_notes}"

test=$(which test 2>/dev/null)

get_tmpdir ()
{
	if [ -w ${_TMPDIR} ] && [ -d "${_TMPDIR}" ]; then
		rm -rf ${_TMPDIR}/*
		echo ${_TMPDIR}
	else
		error '_TMPDIR does not exist or lacking write access'
	fi
}

get_tmpfile ()
{
	if [ -w ${_TMPFILE} ]; then
		echo > ${_TMPFILE}
		echo ${_TMPFILE}
	else
		error '_TMPFILE does not exist or lacking write access'
	fi
}

test_start ()
{
	CURRENT_TEST=$(basename ${1})
	printf '\n\e[1;34m%s\e[0m %s\n' TEST "$(basename ${1})"
	make distclean >/dev/null
}

test_step ()
{
	printf '\n\e[1;34m%s\e[0m %s\n\n' "TEST STEP" "${@}"
}

assert_equal ()
{
	set +o errexit
	test ${1} -eq ${2}
	result=$?
	if [ "${result}" -ne 0 ] && [ -n "${3}" ]; then
		FAILURE="${3}"
	else
		FAILURE="assert_equal failed (${1} not equal to ${2})"
	fi
	set -o errexit

	return ${result}
}

assert_exist ()
{
	local object=$(readlink -m ${1})

	set +o errexit
	${test} -e ${object}
	result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="should exist but does not: ${object}"
	set -o errexit

	return ${result}
}

assert_not_exist ()
{
	local object=$(readlink -m ${1})

	set +o errexit
	${test} ! -e ${object}
	result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="should not exist but does: ${object}"
	set -o errexit

	return ${result}
}

assert_newer_than ()
{
	local file_a=$(readlink -m ${1})
	local file_b=$(readlink -m ${2})

	set +o errexit
	${test} ${file_a} -nt ${file_b}
	result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="${file_a} should be newer than ${file_b}"
	set -o errexit

	return ${result}
}

assert_older_than ()
{
	local file_a=$(readlink -m ${1})
	local file_b=$(readlink -m ${2})

	set +o errexit
	${test} ${file_a} -ot ${file_b}
	result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="${file_a} should be newer than ${file_b}"
	set -o errexit

	return ${result}
}

assert_fail ()
{
	FAILURE="$@"

	return 1
}

assert_clean ()
{
	test_step "Verify that build output was removed"

	set +o errexit
	for file in ${all}; do
		${test} -e ${file}
		result=$?
		if [ "${result}" -eq 0 ]; then
			FAILURE="should not exist but does: ${file}"
			result=1
			break
		else
			result=0
		fi
	done
	set -o errexit

	return ${result}
}

assert_full_build ()
{
	test_step "Verify build output"

	set +o errexit
	for file in ${all}; do
		${test} -e ${file}
		result=$?
		if [ "${result}" -ne 0 ]; then
			FAILURE="should exist but does not: ${file}"
			break
		fi
	done
	set -o errexit

	return ${result}
}

assert_full_build_no_tests ()
{
	test_step "Verify build output"

	set +o errexit
	for file in ${all_no_tests}; do
		${test} -e ${file}
		result=$?
		if [ "${result}" -ne 0 ]; then
			FAILURE="should exist but does not: ${file}"
			break
		fi
	done
	set -o errexit

	return ${result}
}

assert_full_build_coverage ()
{
	test_step "Verify build output (including coverage)"

	set +o errexit
	for file in ${all_coverage}; do
		${test} -e ${file}
		result=$?
		if [ "${result}" -ne 0 ]; then
			FAILURE="should exist but does not: ${file}"
			break
		fi
	done
	set -o errexit

	return ${result}
}
