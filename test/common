#!/bin/bash

export obj="a/main.o b/c/c.o b/d/d.o b/main.o c/c.o c/test_cc d/lib.o e/main.o e/test.o main.o"
export dep="main.d a/main.d b/main.d b/c/c.d b/d/d.d c/c.d d/lib.d e/main.d e/test.d"
export notes="main.gcno a/main.gcno b/main.gcno b/c/c.gcno b/d/d.gcno c/c.gcno d/lib.gcno e/main.gcno e/test.gcno"
export sha1=".compile.cc.sha1 .compile.cxx.sha1 .link.cc.sha1 .link.cxx.sha1"
export targets="a/program_a a/test_dupl b/program_b d/lib.so e/program_e e/test_program program"
export programs="program_a test_dupl program_b program_e program"
export libraries="lib.so"
export data="data.dat"
export libdata="libdata.dat"
export manuals="man.1"
export all="${obj} ${dep} ${sha1} ${targets}"
export all_coverage="${obj} ${dep} ${notes} ${sha1} ${targets}"

test=$(which test 2>/dev/null)

test_start ()
{
	CURRENT_TEST=$(basename ${1})
	printf '\n\e[1;34m%s\e[0m %s\n' TEST "$(basename ${1})"

	make distclean >/dev/null
}

test_step ()
{
	printf '\n\e[1;34m%s\e[0m %s\n\n%s\n' "TEST STEP" "[${CURRENT_TEST}]" "${@}"
}

assert_equal ()
{
	set +o errexit
	test ${1} -eq ${2}
	result=$?
	if [ "${result}" -ne 0 ] && [ -n "${3}" ]; then
		FAILURE="${3}"
	else
		FAILURE="assert_equal failed (${1} not equal to ${2})"
	fi
	set -o errexit

	return ${result}
}

assert_exist ()
{
	local object=$(readlink -f ${1})

	set +o errexit
	${test} -e ${object}
	result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="should exist but does not: ${object}"
	set -o errexit

	return ${result}
}

assert_not_exist ()
{
	local object=$(readlink -f ${1})

	set +o errexit
	${test} ! -e ${object}
	result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="should not exist but does: ${object}"
	set -o errexit

	return ${result}
}

assert_newer_than ()
{
	local file_a=$(readlink -f ${1})
	local file_b=$(readlink -f ${2})

	set +o errexit
	${test} ${file_a} -nt ${file_b}
	result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="${file_a} should be newer than ${file_b}"
	set -o errexit

	return ${result}
}

assert_older_than ()
{
	local file_a=$(readlink -f ${1})
	local file_b=$(readlink -f ${2})

	set +o errexit
	${test} ${file_a} -ot ${file_b}
	result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="${file_a} should be newer than ${file_b}"
	set -o errexit

	return ${result}
}

assert_fail ()
{
	FAILURE="$@"

	return 1
}

assert_clean ()
{
	for file in ${all}; do
		assert_not_exist ${file}
	done
}

assert_full_build ()
{
	for file in ${all}; do
		assert_exist ${file}
	done
}

assert_full_build_coverage ()
{
	for file in ${all_coverage}; do
		assert_exist ${file}
	done
}
