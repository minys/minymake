#!/bin/bash
#
# Common utility functions and variables that are available to test scripts.
#

_c_source=$(find . -name \*.c)
_c_obj=${_c_source//.c/.o}
_c_dep=${_c_source//.c/.d}
_c_not=${_c_source//.c/.gcno}

_cxx_source=$(find . -name \*.cc)
_cxx_obj=${_cxx_source//.cc/.o}
_cxx_dep=${_cxx_source//.cc/.d}
_cxx_not=${_cxx_source//.cc/.gcno}

export obj="${_c_obj} ${_cxx_obj}"
export dep="${_c_dep} ${_cxx_dep}"
export notes="${_c_not} ${_cxx_not}"

export checksum=".compile.cc.checksum .compile.cxx.checksum .link.cc.checksum .link.cxx.checksum"
export targets="a/program_a b/program_b c/test_cc d/libshared.so e/program_e f/test_shared g/zlib_test program h/test_sbin"
export programs="program_a test_cc program_b program_e test_shared zlib_test program"
export system_programs="test_sbin"
export libraries="libshared.so"
export archives="libshared.a"
export all="${obj} ${dep} ${checksum} ${targets}"
export all_coverage="${all} ${notes}"
export all_static="${all//.so/.a}"

test=$(which test 2>/dev/null)

get_tmpdir ()
{
	if [ -w ${_TMPDIR} ] && [ -d "${_TMPDIR}" ]; then
		rm -rf ${_TMPDIR}/*
		echo ${_TMPDIR}
	else
		error '_TMPDIR does not exist or lacking write access'
	fi
}

get_tmpfile ()
{
	if [ -w ${_TMPFILE} ]; then
		echo > ${_TMPFILE}
		echo ${_TMPFILE}
	else
		error '_TMPFILE does not exist or lacking write access'
	fi
}

test_start ()
{
	CURRENT_TEST=$(basename ${1})
	printf '\n\e[1;34m%s\e[0m %s\n' TEST "$(basename ${1})"
	make clean >/dev/null
}

test_step ()
{
	printf '\n\e[1;34m%s\e[0m %s\n\n' "TEST STEP" "${@}"
}

assert_equal ()
{
	local result=0

	test ${1} -eq ${2} || result=$?
	if [ "${result}" -ne 0 ] && [ -n "${3}" ]; then
		FAILURE="${3}"
	else
		FAILURE="assert_equal failed (${1} not equal to ${2})"
	fi

	return ${result}
}

assert_exist ()
{
	local result=0
	local object=$(readlink -m ${1})

	${test} -e ${object} || result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="should exist but does not: ${object}"

	return ${result}
}

assert_not_exist ()
{
	local result=0
	local object=$(readlink -m ${1})

	${test} ! -e ${object} || result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="should not exist but does: ${object}"

	return ${result}
}

assert_newer_than ()
{
	local result=0
	local file_a=$(readlink -m ${1})
	local file_b=$(readlink -m ${2})

	${test} ${file_a} -nt ${file_b} || result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="${file_a} should be newer than ${file_b}"

	return ${result}
}

assert_older_than ()
{
	local result=0
	local file_a=$(readlink -m ${1})
	local file_b=$(readlink -m ${2})

	${test} ${file_a} -ot ${file_b} || result=$?
	[ "${result}" -ne 0 ] &&
		FAILURE="${file_a} should be newer than ${file_b}"

	return ${result}
}

assert_fail ()
{
	FAILURE="$@"

	return 1
}

assert_clean ()
{
	test_step "Verify that build output was removed"

	for file in ${all}; do
		assert_not_exist ${file} || return 1
	done

	return 0
}

assert_full_build ()
{
	test_step "Verify build output"

	for file in ${all}; do
		assert_exist ${file} || return 1
	done

	return 0
}

assert_full_static_build ()
{
	test_step "Verify static build output"

	for file in ${all_static}; do
		assert_exist ${file} || return 1
	done

	return 0
}

assert_full_build_coverage ()
{
	test_step "Verify build output (including coverage)"

	for file in ${all_coverage}; do
		assert_exist ${file} || return 1
	done

	return 0
}
