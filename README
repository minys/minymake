# minymake

 Small non-recursive build enginge inspired by Robert Miller's "Recursive Make
 Considered Harmful".

 minymake goals are to keep it reasonable fast and small, but above all try to
 make sure things are rebuilt when they should. By keeping track of changes to
 make files, compilers, linkers and options to those, minymake detects changes
 that could affect the build and rebuilds all affected targets.

 To start using minymake, copy build.mk into your project directory structure
 and add module files (make fragments). See the test/project for an example
 deployment.


## Modules

 A module is a make fragment that is responsible for declaring dependencies for
 one target (and only one). Modules cannot include other modules, so a bigger
 project needs to include all modules from one top level makefile (or several
 separate ones).

 Modules are listed in a top level makefile in the MODULES variable.

 A module *must* declare the following variables:

     target   : Name of the executable or library that this module is
                responsible for. Only one executable or library is allowed per
                module file and type is deducted from the precense of the suffix
                '.so'.

     src      : Whitespace separated list of source files used to build
                'target'.

 A module *might* declare the following variables:

     test     : Test program that will be run whenever the module target is
                rebuilt. Unless the test program is pre-compiled, a separate
                module using the same path needs to declare a target matching
                the test binary name. Example, module A declares:

                  target := foo
                  test   := bar

                where 'bar' is a shell script. Nothing else needs to be done in
                order for tests to be run as target in module A is rebuilt. If
                however, 'bar' is the name of a binary which is yet to be built,
                a separate module needs to define foo as a target:

                  target := bar
                  src    := bar.c

                'bar' will then be marked as a dependency for 'foo' in module A.
     cflags   : Target specific CFLAGS.
     cxxflags : Target specific CXXFLAGS.
     ldflags  : Target specific LDFLAGS.
     data     : Target data.
     dvi      : Target (or project) documentation in DVI format.
     info     : Target documentation in GNU info format.
     man      : Target documentation in man format.
     pdf      : Target documentation in PDF format.

 Note that targets, source files etc should be referenced through a relative
 path preferable from a module file reciding in the same location as the source
 or target file(s).

 Project wide configuration can be done in a top level makefile (see
 test/project for an example). Header files needs to be handled through
 cflags, cxxflags and ldflags, there is no mechanism to automatically export
 header files to the rest of the project.


## Configuration

 The following variables can be defined before including build.mk, or passed on
 the make command line. They are used to pass options to minymake itself, the
 the compiler or linker.

 Miscellaneous variables:

     PROJECT       : Project name (default: unknown).
     MAJOR_VERSION : Major version (default: 0).
     MINOR_VERSION : Minor version (default: 0).

     VERBOSE       : If defined, echo commands as they are executed.
     BUILDDIR      : If defined, files are generated rooted at BUILDDIR using the same
                     directory structure as they appear in the source tree.

 External tools, override if needed:

     CC       : C compiler
     CXX      : C++ compiler
     INSTALL  : install command
     MAKEINFO : makeinfo command
     PRINTF   : printf command
     TEXI2DVI : texi2dvi command
     TEXI2PDF : texi2pdf command


 Compiler and linker variables:

     CC_SUFFIX        : Suffix for C files (default: c).
     CXX_SUFFIX       : Suffix for C++ files (default: cc).
     CFLAGS           : C compiler options, always applied.
     CXXFLAGS         : C++ compiler options, always applied.
     LDFLAGS          : Linker options, always applied.
     DEBUG_CFLAGS     : C compiler flags added when 'debug' target is invoked.
     DEBUG_CXXFLAGS   : C++ compiler flags added when 'debug' target is invoked.
     GCOV_CFLAGS      : C compiler flags added when 'gcov' target is invoked.
     GCOV_CXXFLAGS    : C++ compiler flags added when 'gcov' target is invoked.
     GCOV_LDFLAGS     : Linker flags added when 'gcov' target is invoked.
     RELEASE_CFLAGS   : C compiler flags added when 'release' target is invoked.
     RELEASE_CXXFLAGS : C++ compiler flags added when 'release' target is invoked.
     STATIC_CFLAGS    : C compiler flags added when 'static' target is invoked.
     STATIC_CXXFLAGS  : C++ compiler flags added when 'static' target is invoked.
     STATIC_LDFLAGS   : Linker flags added when 'static' target is invoked.

 Installation variables, override the default if neccesary:

     BINDIR         : installation directory for binaries (default: bin).
     DATADIR        : installation directory for data (default: share).
     DATAROOTDIR    : installation directory for data (default: share).
     DOCDIR         : installation directory for docs (default: doc).
     DVIDIR         : installation directory for dvi (default: doc).
     INCLUDEDIR     : installation directory for header files (default: include).
     INFODIR        : installation directory for info files (default: DATAROOTDIR/info).
     LIBDIR         : installation directory for libraries (default: lib).
     LIBEXECDIR     : installation directory for libexec (default: libexec).
     LOCALSTATEDIR  : installation directory for logs (default: var).
     MANDIR         : installation directory for manuals (default: DATAROOTDIR/man).
     PDFDIR         : installation directory for pdf files (default: doc).
     PSDIR          : installation directory for ps files(default: doc).
     RUNSTATEDIR    : installation directory for running state (default: run).
     SBINDIR        : installation directory for system binaries (default: sbin).
     SHAREDSTATEDIR : installation directory for shared state (default: com).
     SYSCONFDIR     : installation directory for configuration files (default: etc).
     
     BIN_PERM       : permissions for binaries (default: 755).
     DATA_PERM      : permissions for data (default: 644).
     DVI_PERM       : permissions for dvi (default: 644).
     INFO_PERM      : permissions for info (default: 644).
     LIB_PERM       : permissions for libraries (default: 644).
     MAN_PERM       : permissions for manuals (default: 644).
     PDF_PERM       : permissions for pdfs (default: 644).

     FORCE_INSTALL  : If defined, 'install' target will install everything even
                      if none or some of the files have not been rebuilt.


## Building

 minymake provides the standard GNU targets with some additions:

     release          : Build all using RELEASE_CFLAGS, RELEASE_CXXFLAGS and
                        RELEASE_LDFLAGS.
     debug            : Build all using DEBUG_CFLAGS, RELEASE_CXXFLAGS and
                        DEBUG_LDFLAGS.
     gcov             : Build all using GCOV_CFLAGS, GCOV_CXXFLAGS and
                        GCOV_LDFLAGS.
     static           : Build all using STATIC_CFLAGS, STATIC_CXXFLAGS and
                        STATIC_LDFLAGS.
     clean            : Remove all generated objects.
     mostlyclean      : Remove all generated objects.
     maintainer-clean : Remove all generated objects.
     install          : Build and install to DESTDIR.
     installcheck     : Run post-install checks.
     install-dvi      : Install target for DVI.
     install-pdf      : Install target for PDF.
     install-ps       : Install target for PS.
     install-strip    : Install and strip binaries.
     uninstall        : Uninstall project.
     info             : Generate info files.
     dvi              : Generate dvi files.
     pdf              : Generate PDF files.
     ps               : Generate PostScript files.
     dist             : Create a distribution archive.
     check            : Run all tests, will build necessary dependencies.

## Example

 Please see the project located in the test directory, it uses all features
 that minymake provides and offers a pretty good starting point.
