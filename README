# minymake

 Small build enginge inspired by Robert Miller's "Recursive Make Considered
 Harmful".

 To start using minymake, copy build.mk into your project directory structure
 and add module files (make fragments). See the test/project for an example
 deployment.


## Modules

 A module is a make fragment that is responsible for declaring dependencies for
 one target (and only one). Modules cannot include other modules, so a bigger
 project needs to include all modules from one top level makefile (or several
 separate ones).

 A module *must* declare the following variables:

     target   : Name of the executable or library that this module is
                responsible for. Only one executable or library is allowed per
                module file and type is deducted from the precense of the suffix
                '.so'.

     src      : Whitespace separated list of source files used to build
                'target'.

 A module *might* declare the following variables:

     test     : Test program that will be run whenever the module target is
                rebuilt. Unless the test program is pre-compiled, a separate
                module using the same path needs to declare a target matching
                the test binary name. Example, module A declares:

                  target := foo
                  test   := bar

                where 'bar' is a shell script. Nothing else needs to be done in
                order for tests to be run as target in module A is rebuilt. If
                however, 'bar' is the name of a binary which is yet to be built,
                a separate module needs to define foo as a target:

                  target := bar
                  src    := bar.c

                'bar' will then be marked as a dependency for 'foo' in module A.

     cflags   : Target specific CFLAGS.
     cxxflags : Target specific CXXFLAGS.
     ldflags  : Target specific LDFLAGS.
     data     : Target data.
     dvi      : Target (or project) documentation in DVI format.
     info     : Target documentation in GNU info format.
     man      : Target documentation in man format.
     pdf      : Target documentation in PDF format.

 Note that targets, source files etc should be referenced through a relative
 path preferable from a module file reciding in the same location as the source
 or target file(s).

 Project wide configuration can be done in a top level makefile (see
 test/project for an example). Header files needs to be handled through
 cflags, cxxflags and ldflags, there is no mechanism to automatically export
 header files to the rest of the project.


## Building

 minymake provides the standard GNU targets with some additions:

     release          : Build all using RELEASE_CFLAGS, RELEASE_CXXFLAGS and
                        RELEASE_LDFLAGS.
     debug            : Build all using DEBUG_CFLAGS, RELEASE_CXXFLAGS and
                        DEBUG_LDFLAGS.
     gcov             : Build all using GCOV_CFLAGS, GCOV_CXXFLAGS and
                        GCOV_LDFLAGS.
     static           : Build all using STATIC_CFLAGS, STATIC_CXXFLAGS and
                        STATIC_LDFLAGS.
     clean            : Remove all generated objects
     distclean        : Remove all generated objects
     mostlyclean      : Remove all generated objects
     maintainer-clean : Remove all generated objects
     install          : Build and install to DESTDIR
     installcheck     : Run post-install checks
     install-html     : Install target for HTML
     install-dvi      : Install target for DVI
     install-pdf      : Install target for PDF
     install-ps       : Install target for PS
     install-strip    : Install and strip binaries
     uninstall        : Uninstall project
     TAGS
     info
     dvi
     html
     pdf
     ps
     dist
     check

 The following variables can be defined before including build.mk, or passed on
 the make command line. They are used to pass options to minymake itself, the
 compiler or the linker during builds:

     VERBOSE          : If defined, echo commands as they are executed.
     BUILDDIR         : If defined, files are generated rooted at BUILD_DIR using the same
                        directory structure as they appear in the source tree.
     CFLAGS           : C compiler options, always applied.
     CXXFLAGS         : C++ compiler options, always applied.
     LDFLAGS          : Linker options, always applied.
     DEBUG_CFLAGS     : C compiler flags added when 'debug' target is invoked.
     DEBUG_CXXFLAGS   : C++ compiler flags added when 'debug' target is invoked.
     GCOV_CFLAGS      : C compiler flags added when 'gcov' target is invoked.
     GCOV_CXXFLAGS    : C++ compiler flags added when 'gcov' target is invoked.
     GCOV_LDFLAGS     : Linker flags added when 'gcov' target is invoked.
     RELEASE_CFLAGS   : C compiler flags added when 'release' target is invoked.
     RELEASE_CXXFLAGS : C++ compiler flags added when 'release' target is invoked.
     STATIC_CFLAGS    : C compiler flags added when 'static' target is invoked.
     STATIC_CXXFLAGS  : C++ compiler flags added when 'static' target is invoked.
     STATIC_LDFLAGS   : Linker flags added when 'static' target is invoked.
